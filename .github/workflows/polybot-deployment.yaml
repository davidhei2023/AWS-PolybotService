name: Polybot Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd polybot
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/polybot:latest .
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/polybot:latest

  Deploy:
    runs-on: ubuntu-latest
    needs: Build

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Describe Polybot Instances
        id: describe-polybot-instances
        run: |
          POLYBOT_INSTANCES=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=PolybotInstance" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          echo "POLYBOT_INSTANCES=$POLYBOT_INSTANCES" >> $GITHUB_ENV
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Update Polybot Instances
        run: |
          USER_DATA=$(base64 polybot/AMI-commands.sh | tr -d '\n')

          for instance in $POLYBOT_INSTANCES; do
            aws ec2 create-launch-template-version \
              --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
              --source-version ${{ secrets.LAUNCH_TEMPLATE_VERSION }} \
              --launch-template-data "{\"UserData\":\"$USER_DATA\"}"
              
            aws ec2 modify-launch-template \
              --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
              --default-version $(aws ec2 describe-launch-template-versions --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} --query "LaunchTemplateVersions[-1].VersionNumber" --output text)
              
            aws autoscaling start-instance-refresh \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }}
          done
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          POLYBOT_INSTANCES: ${{ env.POLYBOT_INSTANCES }}
